// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: purchase.proto

package purchaseproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PurchaseServiceClient is the client API for PurchaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PurchaseServiceClient interface {
	ReserveItem(ctx context.Context, in *ReserveItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelReserveItem(ctx context.Context, in *ReserveItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*Reservation, error)
	BuyReservation(ctx context.Context, in *BuyReservationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAvailableProductsToReservation(ctx context.Context, in *PharmacyID, opts ...grpc.CallOption) (*Products, error)
}

type purchaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchaseServiceClient(cc grpc.ClientConnInterface) PurchaseServiceClient {
	return &purchaseServiceClient{cc}
}

func (c *purchaseServiceClient) ReserveItem(ctx context.Context, in *ReserveItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/purchaseService.PurchaseService/ReserveItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseServiceClient) CancelReserveItem(ctx context.Context, in *ReserveItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/purchaseService.PurchaseService/CancelReserveItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseServiceClient) GetReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*Reservation, error) {
	out := new(Reservation)
	err := c.cc.Invoke(ctx, "/purchaseService.PurchaseService/GetReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseServiceClient) BuyReservation(ctx context.Context, in *BuyReservationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/purchaseService.PurchaseService/BuyReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseServiceClient) GetAvailableProductsToReservation(ctx context.Context, in *PharmacyID, opts ...grpc.CallOption) (*Products, error) {
	out := new(Products)
	err := c.cc.Invoke(ctx, "/purchaseService.PurchaseService/GetAvailableProductsToReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchaseServiceServer is the server API for PurchaseService service.
// All implementations must embed UnimplementedPurchaseServiceServer
// for forward compatibility
type PurchaseServiceServer interface {
	ReserveItem(context.Context, *ReserveItemRequest) (*emptypb.Empty, error)
	CancelReserveItem(context.Context, *ReserveItemRequest) (*emptypb.Empty, error)
	GetReservation(context.Context, *GetReservationRequest) (*Reservation, error)
	BuyReservation(context.Context, *BuyReservationRequest) (*emptypb.Empty, error)
	GetAvailableProductsToReservation(context.Context, *PharmacyID) (*Products, error)
	mustEmbedUnimplementedPurchaseServiceServer()
}

// UnimplementedPurchaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPurchaseServiceServer struct {
}

func (UnimplementedPurchaseServiceServer) ReserveItem(context.Context, *ReserveItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveItem not implemented")
}
func (UnimplementedPurchaseServiceServer) CancelReserveItem(context.Context, *ReserveItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReserveItem not implemented")
}
func (UnimplementedPurchaseServiceServer) GetReservation(context.Context, *GetReservationRequest) (*Reservation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation not implemented")
}
func (UnimplementedPurchaseServiceServer) BuyReservation(context.Context, *BuyReservationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyReservation not implemented")
}
func (UnimplementedPurchaseServiceServer) GetAvailableProductsToReservation(context.Context, *PharmacyID) (*Products, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableProductsToReservation not implemented")
}
func (UnimplementedPurchaseServiceServer) mustEmbedUnimplementedPurchaseServiceServer() {}

// UnsafePurchaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurchaseServiceServer will
// result in compilation errors.
type UnsafePurchaseServiceServer interface {
	mustEmbedUnimplementedPurchaseServiceServer()
}

func RegisterPurchaseServiceServer(s grpc.ServiceRegistrar, srv PurchaseServiceServer) {
	s.RegisterService(&PurchaseService_ServiceDesc, srv)
}

func _PurchaseService_ReserveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).ReserveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/purchaseService.PurchaseService/ReserveItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).ReserveItem(ctx, req.(*ReserveItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseService_CancelReserveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).CancelReserveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/purchaseService.PurchaseService/CancelReserveItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).CancelReserveItem(ctx, req.(*ReserveItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseService_GetReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).GetReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/purchaseService.PurchaseService/GetReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).GetReservation(ctx, req.(*GetReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseService_BuyReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).BuyReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/purchaseService.PurchaseService/BuyReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).BuyReservation(ctx, req.(*BuyReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseService_GetAvailableProductsToReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PharmacyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).GetAvailableProductsToReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/purchaseService.PurchaseService/GetAvailableProductsToReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).GetAvailableProductsToReservation(ctx, req.(*PharmacyID))
	}
	return interceptor(ctx, in, info, handler)
}

// PurchaseService_ServiceDesc is the grpc.ServiceDesc for PurchaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PurchaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "purchaseService.PurchaseService",
	HandlerType: (*PurchaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReserveItem",
			Handler:    _PurchaseService_ReserveItem_Handler,
		},
		{
			MethodName: "CancelReserveItem",
			Handler:    _PurchaseService_CancelReserveItem_Handler,
		},
		{
			MethodName: "GetReservation",
			Handler:    _PurchaseService_GetReservation_Handler,
		},
		{
			MethodName: "BuyReservation",
			Handler:    _PurchaseService_BuyReservation_Handler,
		},
		{
			MethodName: "GetAvailableProductsToReservation",
			Handler:    _PurchaseService_GetAvailableProductsToReservation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "purchase.proto",
}
