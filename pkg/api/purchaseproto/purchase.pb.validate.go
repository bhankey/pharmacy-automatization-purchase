// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: purchase.proto

package purchaseproto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReserveItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveItemRequestMultiError, or nil if none found.
func (m *ReserveItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PharmacyId

	// no validation rules for ItemName

	// no validation rules for Position

	// no validation rules for PurchaseUuid

	if len(errors) > 0 {
		return ReserveItemRequestMultiError(errors)
	}
	return nil
}

// ReserveItemRequestMultiError is an error wrapping multiple validation errors
// returned by ReserveItemRequest.ValidateAll() if the designated constraints
// aren't met.
type ReserveItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveItemRequestMultiError) AllErrors() []error { return m }

// ReserveItemRequestValidationError is the validation error returned by
// ReserveItemRequest.Validate if the designated constraints aren't met.
type ReserveItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveItemRequestValidationError) ErrorName() string {
	return "ReserveItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveItemRequestValidationError{}

// Validate checks the field values on GetReservationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReservationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReservationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReservationRequestMultiError, or nil if none found.
func (m *GetReservationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReservationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PharmacyId

	// no validation rules for PurchaseUuid

	// no validation rules for IsSocialCard

	if len(errors) > 0 {
		return GetReservationRequestMultiError(errors)
	}
	return nil
}

// GetReservationRequestMultiError is an error wrapping multiple validation
// errors returned by GetReservationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetReservationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReservationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReservationRequestMultiError) AllErrors() []error { return m }

// GetReservationRequestValidationError is the validation error returned by
// GetReservationRequest.Validate if the designated constraints aren't met.
type GetReservationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReservationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReservationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReservationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReservationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReservationRequestValidationError) ErrorName() string {
	return "GetReservationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReservationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReservationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReservationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReservationRequestValidationError{}

// Validate checks the field values on Reservation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reservation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reservation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReservationMultiError, or
// nil if none found.
func (m *Reservation) ValidateAll() error {
	return m.validate(true)
}

func (m *Reservation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReservationValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReservationValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReservationValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SummaryPrice

	if len(errors) > 0 {
		return ReservationMultiError(errors)
	}
	return nil
}

// ReservationMultiError is an error wrapping multiple validation errors
// returned by Reservation.ValidateAll() if the designated constraints aren't met.
type ReservationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReservationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReservationMultiError) AllErrors() []error { return m }

// ReservationValidationError is the validation error returned by
// Reservation.Validate if the designated constraints aren't met.
type ReservationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReservationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReservationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReservationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReservationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReservationValidationError) ErrorName() string { return "ReservationValidationError" }

// Error satisfies the builtin error interface
func (e ReservationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReservation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReservationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReservationValidationError{}

// Validate checks the field values on ReservationProductInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReservationProductInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReservationProductInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReservationProductInfoMultiError, or nil if none found.
func (m *ReservationProductInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ReservationProductInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Count

	// no validation rules for Price

	if len(errors) > 0 {
		return ReservationProductInfoMultiError(errors)
	}
	return nil
}

// ReservationProductInfoMultiError is an error wrapping multiple validation
// errors returned by ReservationProductInfo.ValidateAll() if the designated
// constraints aren't met.
type ReservationProductInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReservationProductInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReservationProductInfoMultiError) AllErrors() []error { return m }

// ReservationProductInfoValidationError is the validation error returned by
// ReservationProductInfo.Validate if the designated constraints aren't met.
type ReservationProductInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReservationProductInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReservationProductInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReservationProductInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReservationProductInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReservationProductInfoValidationError) ErrorName() string {
	return "ReservationProductInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ReservationProductInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReservationProductInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReservationProductInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReservationProductInfoValidationError{}

// Validate checks the field values on PaginationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaginationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginationRequestMultiError, or nil if none found.
func (m *PaginationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLastId() < 0 {
		err := PaginationRequestValidationError{
			field:  "LastId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() > 5000 {
		err := PaginationRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 5000",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PaginationRequestMultiError(errors)
	}
	return nil
}

// PaginationRequestMultiError is an error wrapping multiple validation errors
// returned by PaginationRequest.ValidateAll() if the designated constraints
// aren't met.
type PaginationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationRequestMultiError) AllErrors() []error { return m }

// PaginationRequestValidationError is the validation error returned by
// PaginationRequest.Validate if the designated constraints aren't met.
type PaginationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationRequestValidationError) ErrorName() string {
	return "PaginationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PaginationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationRequestValidationError{}

// Validate checks the field values on PharmacyID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PharmacyID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PharmacyID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PharmacyIDMultiError, or
// nil if none found.
func (m *PharmacyID) ValidateAll() error {
	return m.validate(true)
}

func (m *PharmacyID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PharmacyId

	if len(errors) > 0 {
		return PharmacyIDMultiError(errors)
	}
	return nil
}

// PharmacyIDMultiError is an error wrapping multiple validation errors
// returned by PharmacyID.ValidateAll() if the designated constraints aren't met.
type PharmacyIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PharmacyIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PharmacyIDMultiError) AllErrors() []error { return m }

// PharmacyIDValidationError is the validation error returned by
// PharmacyID.Validate if the designated constraints aren't met.
type PharmacyIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PharmacyIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PharmacyIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PharmacyIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PharmacyIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PharmacyIDValidationError) ErrorName() string { return "PharmacyIDValidationError" }

// Error satisfies the builtin error interface
func (e PharmacyIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPharmacyID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PharmacyIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PharmacyIDValidationError{}

// Validate checks the field values on Products with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Products) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Products with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductsMultiError, or nil
// if none found.
func (m *Products) ValidateAll() error {
	return m.validate(true)
}

func (m *Products) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductsValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductsValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductsValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProductsMultiError(errors)
	}
	return nil
}

// ProductsMultiError is an error wrapping multiple validation errors returned
// by Products.ValidateAll() if the designated constraints aren't met.
type ProductsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductsMultiError) AllErrors() []error { return m }

// ProductsValidationError is the validation error returned by
// Products.Validate if the designated constraints aren't met.
type ProductsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsValidationError) ErrorName() string { return "ProductsValidationError" }

// Error satisfies the builtin error interface
func (e ProductsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProducts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Price

	// no validation rules for Count

	// no validation rules for Position

	// no validation rules for NeedPrescriptionForMedicine

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}
	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}
